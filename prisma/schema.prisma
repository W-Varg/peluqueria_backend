// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ----------------------------------------------------- models ----------------------------------------------------- //
enum Rol {
  ADMIN
  EMPLEADO
  CLIENTE
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String
  name      String    @map("nombre")
  rol       Rol       @default(CLIENTE)
  cliente   Cliente?
  empleado  Empleado?
  createdAt DateTime  @default(now())

  @@map("Usuario")
}

model Empleado {
  id         Int       @id @default(autoincrement())
  usuarioId  Int       @unique
  usuario    User      @relation(fields: [usuarioId], references: [id])
  sucursalId Int
  sucursal   Sucursal  @relation(fields: [sucursalId], references: [id])
  reservas   Reserva[]
  estado     Boolean   @default(true)
}

model Cliente {
  id           Int       @id @default(autoincrement())
  usuarioId    Int       @unique
  usuario      User      @relation(fields: [usuarioId], references: [id])
  telefono     String?
  estado       Boolean   @default(true)
  reservas     Reserva[]
  visitasTotal Int       @default(0)
  ultimaVisita DateTime?
}

model Sucursal {
  id        Int        @id @default(autoincrement())
  nombre    String
  direccion String
  telefono  String
  empleados Empleado[]
  estado    Boolean    @default(true)
}

model Servicio {
  id          Int                @id @default(autoincrement())
  nombre      String
  descripcion String
  duracion    Int // duraci√≥n en minutos
  precio      Float
  reservas    Reserva[]
  productos   ServicioProducto[]
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  estado      Boolean            @default(true)
}

model Reserva {
  id         Int           @id @default(autoincrement())
  fecha      DateTime
  hora       DateTime
  clienteId  Int
  cliente    Cliente       @relation(fields: [clienteId], references: [id])
  empleadoId Int?
  empleado   Empleado?     @relation(fields: [empleadoId], references: [id])
  servicioId Int
  servicio   Servicio      @relation(fields: [servicioId], references: [id])
  estado     EstadoReserva @default(PENDIENTE)
  factura    Factura?
}

enum EstadoReserva {
  PENDIENTE
  CONFIRMADA
  CANCELADA
  COMPLETADA
}

model Producto {
  id          Int                @id @default(autoincrement())
  nombre      String
  descripcion String
  precio      Float
  stock       Int
  categoria   String
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  servicios   ServicioProducto[]
  estado      Boolean            @default(true)
}

model ServicioProducto {
  id         Int      @id @default(autoincrement())
  servicioId Int
  productoId Int
  cantidad   Int
  servicio   Servicio @relation(fields: [servicioId], references: [id])
  producto   Producto @relation(fields: [productoId], references: [id])
}

model Factura {
  id        Int           @id @default(autoincrement())
  reservaId Int           @unique
  reserva   Reserva       @relation(fields: [reservaId], references: [id])
  total     Float
  descuento Float         @default(0)
  fecha     DateTime      @default(now())
  estado    EstadoFactura @default(PENDIENTE)
}

enum EstadoFactura {
  PENDIENTE
  PAGADA
  CANCELADA
}
